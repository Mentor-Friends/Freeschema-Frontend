import { GetCompositionListListener, NORMAL, StatefulWidget } from "mftsccs-browser";
import { getLocalUserId } from "../user/login.service";

// Class for StatefulWidget behavior
class StatefulWidgetWrapper extends StatefulWidget {
  countrylist: any = [];
  inpage: number= 20;
  page: number = 1;
  widgetDidMount(): void {
    let userId:number = getLocalUserId();
    GetCompositionListListener("the_country", userId, this.inpage, this.page, NORMAL).subscribe((output: any)=>{
        this.countrylist = output;
        this.render();
    })   
  }
  // getHtml(): string {
  //   return `
  //     <h2>This is StatefulWidget</h2>
  //   `;
  // }
}

// Custom Element class combining both features
export class MyCustomElement extends HTMLElement {
  private stateWidget: StatefulWidgetWrapper;

  constructor() {
    super();
    this.stateWidget = new StatefulWidgetWrapper();
    this.stateWidget.widgetDidMount()
    console.log(this.stateWidget.countrylist,"output")
  }
  // getHtml function to render HTML for the custom element
  getHtml(): string {
    return `
      <h2>This is MyCustomElement</h2>
      <p>Custom Element Initialized with Data: ${this.getAttribute('name')}</p>
    `;
  }
  // connectedCallback function to handle the element's connection to the DOM
  connectedCallback() {
    // Set up the basic HTML content for this element
    this.innerHTML = this.getHtml();

    // Append HTML generated by StatefulWidget
    this.innerHTML += this.stateWidget.getHtml();

    // Additional connected logic, e.g., logging or notifications
    console.log("MyCustomElement connected to the DOM.");
  }

  // disconnectedCallback function to handle disconnection logic
  disconnectedCallback() {
    console.log("MyCustomElement disconnected from the DOM.");
  }
}

// Define the custom element
// customElements.define('my-custom-element', MyCustomElement);

export default MyCustomElement;
